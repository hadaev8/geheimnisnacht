
# MECHANICS EVENTS
# @author Arsakes <elminister@interia.pl>
# @compatibility 2.3.0
# @modified_on 0.4
# @description Warhammer mod custom duel engine
# @wip
# duelengine.0 : triggering event!
# Duel engine consit of:
# 1.Decision events - that give chars opportunity to chose move
# 2.Calculation events - that calculate the outcome of player decisions
# and choose proper report events
# 3. Paired (each report has it mirror event for the other character)
# reporting events
# DO NOT TOUCH THIS FILE!
# !!!!!!!!!!!!!!!!!!!!!! DO NOT TOUCH !!!!!!!!!!!!!!!!!!!!!!
# 1. Each round have two turns for both of characters.
# Character A - event_target:charA
# Character B - event_target:charB
# CHARACTER STATS
# duel_dmg - dmg taken form enemy this round
# duel_att - base attack
# duel_def - base defense
# duel_hp - actual hit points
# duel_max_hp - maximal hit points
# duel_att_mod - attack value for given round
# duel_def_mod - defence value for given round
namespace = duelengine

# DUEL TRIGGERING EVENTS
# duelengine.0 : Start duel during battlefield
character_event = {
	id = duelengine.0
	border = "GFX_event_normal_frame_war"
	desc = "EVTDESC_DUELENGINE_0"
	picture = GFX_evt_battle
	is_triggered_only = yes

	trigger = {
		nor = {
			has_character_modifier = battlefield_fight
			has_character_flag = duel
		}
		# Avoid crossing targets
		any_character = {
			war_with = ROOT
			in_battle = yes
			at_location = ROOT
			prisoner = no
			is_alive = yes
			nor = {
				character = ROOT
				has_character_modifier = battlefield_fight
				has_character_flag = duel
			}
		}
	}

	weight_multiplier = {
		factor = 1
		# Game Rules
		modifier = {
			factor = 0.2
			has_game_rule = {
				name = warhammer_battlefield_duels
				value = less_fequent
			}
		}
		modifier = {
			factor = 5
			has_game_rule = {
				name = warhammer_battlefield_duels
				value = more_frequent
			}
		}
		# greater chance for duel of warlike races
		modifier = {
			factor = 2
			OR = {
				culture_group = orc_group
				culture_group = ogre_group
				culture_group = lizardman_group
			}
		}
		modifier = {
			factor = 1.5
			OR = {
				culture_group = hung_group
				culture_group = amazon_group
				culture_group = kurgan_group
				culture_group = norscan_group
				culture_group = dwarf_group
				culture_group = dwarf_chaos_group
			}
		}
		modifier = {
			factor = 3
			trait = duelist
		}
		modifier = {
			factor = 3
			trait = brave
		}
		modifier = {
			factor = 3
			trait = wroth
		}
		modifier = {
			factor = 0.25
			trait = craven
		}
		modifier = {
			factor = 2.5
			trait = poor_warrior
		}
		modifier = {
			factor = 3
			trait = trained_warrior
		}
		modifier = {
			factor = 3.5
			trait = skilled_warrior
		}
		modifier = {
			factor = 4
			trait = master_warrior
		}
		modifier = {
			factor = 2
			trait = magic_power_adept
		}
		modifier = {
			factor = 3
			OR = {
				trait = magic_power_magister
				trait = magic_power_lord
				trait = magic_power_archmaster
			}
		}
	}

	immediate = {
		log = "DUEL TRIGGERED for [Root.GetFullName]"
		add_character_modifier = {
			name = battlefield_fight
			duration = 10
		}
		set_character_flag = duel
		save_event_target_as = duelist_a
		# Target lock
		# case 1 - we have our own war
		random_character = {
			limit = {
				war_with = ROOT
				in_battle = yes
				at_location = ROOT
				prisoner = no
				is_alive = yes
				nor = {
					character = ROOT
					has_character_modifier = battlefield_fight
					has_character_flag = duel
				}
			}
			save_event_target_as = duelist_b
			set_character_flag = duel
		}
	}

	# OPTIONS
	option = {
		# we assume that there is only one person marked with opinion_battle_duel_target
		# which is wrong
		name = "EVTOPT_DUELENGINE_1A"
		event_target:duelist_b = {
			hidden_tooltip = {
				character_event = {
					id = duelengine.1
				}
			}
		}
	}
}

# END OF DUEL TRIGGERS
# DUEL INIT: Things that need to be done once per duel
# duelengine.1 Triggered for defender(target), gives option to fight or run- for charB
character_event = {
	id = duelengine.1
	desc = "EVTDESC_DUELENGINE_1"
	picture = "GFX_evt_duel0"
	border = "GFX_event_normal_frame_war"
	is_triggered_only = yes

	immediate = {
		log = "CharB go asked for duel"
		# VERY IMPORTANT SETTING EVENT TARGETS
		save_event_target_as = defender
		save_event_target_as = charB
		event_target:duelist_a = {
			save_event_target_as = charA
			save_event_target_as = attacker
		}
		add_character_modifier = {
			name = battlefield_fight
			duration = 10
		}
		event_target:duelist_a = {
			add_character_modifier = {
				name = battlefield_fight
				duration = 10
			}
		}
		# Remove targeting information (just from the fighter)
	}

	option = {
		name = "EVTOPT_DUELENGINE_1A"
		log = "CharB go wants duel."
		event_target:attacker = {
			character_event = {
				id = duelengine.2
				tooltip = "DUELENGINE_TOOLTIP_1A"
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 10
				trait = witch_hunter
			}
			modifier = {
				factor = 10
				trait = dwarf_slayer
			}
			modifier = {
				factor = 10
				trait = creature_orc
			}
			modifier = {
				factor = 10
				trait = creature_beastman
			}
			modifier = {
				factor = 10
				has_minor_title = lahmian_protector
			}
			modifier = {
				factor = 6
				trait = duelist
			}
			modifier = {
				factor = 6
				trait = brave
			}
			modifier = {
				factor = 3
				trait = proud
			}
			modifier = {
				factor = 3
				trait = wroth
			}
			modifier = {
				factor = 3
				trait = strong
			}
			modifier = {
				factor = 3
				trait = tall
			}
		}
	}

	option = {
		name = "EVTOPT_DUELENGINE_1B"
		trigger = {
			NOT = {
				has_character_flag = duel_effect_noescape
			}
		}
		hidden_tooltip = {
			event_target:attacker = {
				character_event = {
					id = duelaction.203
				}
			}
		}
		if = {
			limit = {
				NOT = {
					trait = craven
				}
			}
			random = {
				chance = 25
				add_trait = craven
				hidden_tooltip = {
					character_event = {
						id = 38257 # Notify FIXME
					}
				}
			}
		}
		morale = -0.1
		ai_chance = {
			factor = 20
			modifier = {
				factor = 0.1
				trait = dwarf_slayer
			}
			modifier = {
				factor = 0.1
				trait = witch_hunter
			}
			modifier = {
				factor = 0.1
				trait = creature_orc
			}
			modifier = {
				factor = 0.1
				trait = creature_beastman
			}
			modifier = {
				factor = 0.1
				has_minor_title = lahmian_protector
			}
			modifier = {
				factor = 2
				event_target:charA = {
					trait = strong
				}
			}
			modifier = {
				factor = 2
				event_target:charA = {
					trait = tall
				}
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = paranoid
			}
			modifier = {
				factor = 2
				trait = weak
			}
			modifier = {
				factor = 2
				trait = dwarf
			}
			modifier = {
				factor = 2
				trait = hunchback
			}
			modifier = {
				factor = 2
				trait = leper
			}
			modifier = {
				factor = 2
				trait = wounded
			}
			modifier = {
				factor = 4
				trait = maimed
			}
		}
	}
}

# duelengine.2: Asks attacker if he wants the duel - for charA
character_event = {
	id = duelengine.2
	desc = "EVTDESC_DUELENGINE_1" # the same locals
	picture = "GFX_evt_duel0"
	border = "GFX_event_normal_frame_war"
	is_triggered_only = yes

	option = {
		name = "EVTOPT_DUELENGINE_1A"
		log = "Begin duel both dudes agreed! (from duelengine.2)"
		hidden_tooltip = {
			event_target:charA = {
				character_event = {
					id = duelinit.0
				}
			}
			event_target:charB = {
				character_event = {
					id = duelinit.0
				}
			}
			event_target:charA = {
				character_event = {
					id = duelengine.3
				}
			}
		}
		ai_chance = {
			factor = 100
			modifier = {
				factor = 10
				trait = witch_hunter
			}
			modifier = {
				factor = 10
				has_minor_title = lahmian_protector
			}
			modifier = {
				factor = 2
				trait = brave
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 1.5
				trait = strong
			}
			modifier = {
				factor = 1.5
				trait = tall
			}
		}
	}

	# RUN from enemy!
	option = {
		name = "EVTOPT_DUELENGINE_1B"
		hidden_tooltip = {
			FROM = {
				character_event = {
					id = duelaction.203
				}
			}
		}
		if = {
			limit = {
				NOT = {
					trait = craven
				}
			}
			random = {
				chance = 25
				add_trait = craven
				hidden_tooltip = {
					character_event = {
						id = 38257 # Notify
					}
				}
			}
		}
		morale = -0.1
		ai_chance = {
			# FIXME factor
			factor = 20
			modifier = {
				factor = 0.1
				trait = witch_hunter
			}
			modifier = {
				factor = 0.1
				has_minor_title = lahmian_protector
			}
			modifier = {
				factor = 2
				event_target:charB = {
					trait = strong
				}
			}
			modifier = {
				factor = 2
				event_target:charB = {
					trait = tall
				}
			}
			modifier = {
				factor = 2
				trait = craven
			}
			modifier = {
				factor = 2
				trait = paranoid
			}
			modifier = {
				factor = 2
				trait = weak
			}
			modifier = {
				factor = 2
				trait = dwarf
			}
			modifier = {
				factor = 2
				trait = hunchback
			}
			modifier = {
				factor = 2
				trait = leper
			}
			modifier = {
				factor = 2
				trait = wounded
			}
			modifier = {
				factor = 4
				trait = maimed
			}
		}
	}
}

# duelengine.3: Round init event fired on the begining of each round
character_event = {
	id = duelengine.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "Initing the next round...."
		clear_event_target = attacker
		clear_event_target = defender
		event_target:charA = {
			save_event_target_as = attacker # already saved?
			# round variables clear event
			character_event = {
				id = duelaction.1
			}
			# prepare action pick menu
			character_event = {
				id = duelaction.0
			}
		}
		event_target:charB = {
			save_event_target_as = defender
			# round variables clear event
			character_event = {
				id = duelaction.1
			}
			# prepare action pick menu
			character_event = {
				id = duelaction.0
			}
		}
		event_target:charA = {
			# send action pick menu to char A
			character_event = {
				id = duelaction.2
			}
		}
	}
}

# duelengine.4 After action pick event (triggered by last actionpick event)
character_event = {
	id = duelengine.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				character = event_target:charA
			}
			# Decision time for character B
			log = "Action pick phase finished for charA, starting for B"
			# triger action pick menu
			event_target:charB = {
				character_event = {
					id = duelaction.2
				}
			}
			break = yes
		}
		# Time to calculate outcome and go to next round
		# we assume that all stat setting has been made and chars decided their actions
		log = "Action pick phase finished for charB, resolving actions..."
		# resolve actions
		event_target:charA = {
			character_event = {
				id = duelaction.3
			}
		}
	}
}

# This event assumes that one have properly defined event targets
# event is triggered for event_target:attacker
# whereas computation is done for defender
# duelengine.5 : second calculation event, applies damage triggered from duelaction.3
character_event = {
	id = duelengine.5
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# Remember that: ROOT = event_target:attacker !!!!
		# set basic damage
		event_target:defender = {
			set_variable = {
				which = "duel_dmg"
				value = 0
			}
			set_variable = {
				which = "duel_att_mod_app"
				value = "0"
			}
		}
		event_target:attacker = {
			set_variable = {
				which = "duel_att_mod_app"
				value = "0"
			}
			# dmg from attack calculation (event_target:defender is victim)
			set_variable = {
				which = "duel_att_mod_app"
				which = "duel_att_mod"
			}
			if = {
				limit = {
					not = {
						check_variable = {
							which = "duel_att_mod_app"
							value = "0"
						}
					}
				}
				set_variable = {
					which = "duel_att_mod_app"
					value = "0"
				}
			}
		}
		event_target:defender = {
			set_variable = {
				which = "duel_att_mod_app"
				which = "event_target:attacker"
			}
			set_variable = {
				which = "duel_dmg"
				which = "duel_att_mod_app"
			}
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = "dodge_timer"
						value = 0
					}
				}
			}
			change_variable = {
				which = "dodge_timer"
				value = "-1"
			}
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = "block_timer"
						value = 0
					}
				}
			}
			change_variable = {
				which = "block_timer"
				value = "-1"
			}
		}
		# now we have properly defined duel_dmg for defender
		# now take into account his defence capabilities
		if = {
			limit = {
				check_variable = {
					which = "high_magic_fire"
					value = 1
				}
			}
			change_variable = {
				which = "high_magic_fire"
				value = -1
			}
			save_event_target_as = magic_caster
			event_target:defender = {
				save_event_target_as = spelltarget
			}
			magic_resist_test = yes
			if = {
				limit = {
					has_character_flag = resisted
				}
				set_variable = {
					which = "high_magic_fire_dmg"
					value = 3
				}
				clr_character_flag = resisted
			}
			if = {
				limit = {
					not = {
						has_character_flag = resisted
					}
				}
				set_variable = {
					which = "high_magic_fire_dmg"
					value = 4
				}
				change_variable = {
					which = "high_magic_fire_dmg"
					which = caster_level_spellpower
				}
			}
			event_target:defender = {
				subtract_variable = {
					which = "duel_hp"
					which = "high_magic_fire_dmg"
				}
			}
		}
		if = {
			limit = {
				check_variable = {
					which = "high_magic_curse"
					value = 1
				}
			}
			change_variable = {
				which = "high_magic_curse"
				value = -1
			}
			save_event_target_as = magic_caster
			event_target:defender = {
				save_event_target_as = spelltarget
			}
			magic_resist_test = yes
			if = {
				limit = {
					has_character_flag = resisted
				}
				set_variable = {
					which = "high_magic_curse_dmg"
					value = 1
				}
				clr_character_flag = resisted
			}
			if = {
				limit = {
					not = {
						has_character_flag = resisted
					}
				}
				set_variable = {
					which = "high_magic_curse_dmg"
					value = 3
				}
				change_variable = {
					which = "high_magic_curse_dmg"
					which = caster_level_spellpower
				}
			}
			event_target:defender = {
				subtract_variable = {
					which = "duel_def_mod"
					which = "high_magic_curse_dmg"
				}
				subtract_variable = {
					which = "duel_att_mod"
					which = "high_magic_curse_dmg"
				}
			}
		}
		if = {
			limit = {
				event_target:defender = {
					check_variable = {
						which = "high_magic_curse"
						value = 1
					}
				}
			}
			event_target:defender = {
				change_variable = {
					which = "high_magic_curse"
					value = -1
				}
				save_event_target_as = magic_caster
				event_target:attacker = {
					save_event_target_as = spelltarget
				}
				magic_resist_test = yes
				if = {
					limit = {
						has_character_flag = resisted
					}
					set_variable = {
						which = "high_magic_curse_dmg"
						value = 1
					}
					clr_character_flag = resisted
				}
				if = {
					limit = {
						not = {
							has_character_flag = resisted
						}
					}
					set_variable = {
						which = "high_magic_curse_dmg"
						value = 3
					}
					change_variable = {
						which = "high_magic_curse_dmg"
						which = caster_level_spellpower
					}
				}
				event_target:attacker = {
					subtract_variable = {
						which = "duel_def_mod"
						which = "high_magic_curse_dmg"
					}
					subtract_variable = {
						which = "duel_att_mod"
						which = "high_magic_curse_dmg"
					}
				}
			}
		}
		if = {
			limit = {
				check_variable = {
					which = "high_magic_healing"
					value = 1
				}
			}
			change_variable = {
				which = "high_magic_healing"
				value = -1
			}
			set_variable = {
				which = "high_magic_heal"
				value = 4
			}
			change_variable = {
				which = "high_magic_heal"
				which = caster_level_spellpower
			}
			change_variable = {
				which = "duel_hp"
				which = "high_magic_heal"
			}
		}
		if = {
			limit = {
				check_variable = {
					which = "high_magic_shielding"
					value = 0
				}
			}
			change_variable = {
				which = "high_magic_shielding"
				value = -1
			}
			save_event_target_as = magic_caster
			set_variable = {
				which = "high_magic_shield"
				value = 4
			}
			change_variable = {
				which = "high_magic_shield"
				which = caster_level_spellpower
			}
			change_variable = {
				which = "duel_def_mod"
				which = "high_magic_shield"
			}
		}
		if = {
			limit = {
				event_target:defender = {
					check_variable = {
						which = "high_magic_shielding"
						value = 1
					}
				}
			}
			event_target:defender = {
				change_variable = {
					which = "high_magic_shielding"
					value = -1
				}
				set_variable = {
					which = "high_magic_shield"
					value = 4
				}
				change_variable = {
					which = "high_magic_shield"
					which = caster_level_spellpower
				}
				change_variable = {
					which = "duel_def_mod"
					which = "high_magic_shield"
				}
			}
		}
		clear_event_target = magic_caster
		clear_event_target = spelltarget
		# APPLY: defence modifier (of victim)
		event_target:defender = {
			subtract_variable = {
				which = "duel_dmg"
				which = "duel_def_mod"
			}
		}
		# Ok now duel_dmg has proper value which we should substract from health
		# thing that prevents infinite duels setting dmg to 1 if less than 0
		# (50% chance) or to 0
		event_target:defender = {
			if = {
				limit = {
					NOT = {
						check_variable = {
							which = "duel_dmg"
							value = 0
						}
					}
				}
				set_variable = {
					which = "duel_dmg"
					value = 0
				}
			}
		}
		event_target:defender = {
			if = {
				limit = {
					NOT = {
						check_variable = {
							which = "duel_dmg"
							value = 1
						}
					}
				}
				random = {
					chance = 50
					set_variable = {
						which = "duel_dmg"
						value = 1
					}
				}
			}
		}
		# applying damage
		if = {
			limit = {
				nor = {
					has_character_flag = high_magic_duel_fire
					has_character_flag = high_magic_duel_curse
					has_character_flag = high_magic_duel_shielding
					has_character_flag = high_magic_duel_healing
					has_character_flag = magic_channel
					has_character_flag = duel_action_dodge
					has_character_flag = duel_action_block
					has_character_flag = duel_action_assess
				}
			}
			event_target:defender = {
				subtract_variable = {
					which = "duel_hp"
					which = "duel_dmg"
				}
			}
		}
		# NOW:
		# attacker -> defender
		# defender -> attacker
		# and rerun the whole function
		clear_event_target = attacker
		clear_event_target = defender
		if = {
			limit = {
				character = event_target:charA
			}
			log = "Round resolved for char A (id = duelengine.5), starting for char B"
			event_target:charA = {
				save_event_target_as = defender
			}
			event_target:charB = {
				save_event_target_as = attacker
			}
			# loop this event
			event_target:charB = {
				character_event = {
					id = duelengine.5
				}
			}
		}
		if = {
			limit = {
				NOT = {
					character = event_target:charA
				}
			}
			log = "Round resolved for char B (id = duelengine.5), B received [Root.duel_dmg.GetValue] dmg, A received [From.duel_dmg.GetValue]."
			# if calculations are done now is the time for reports
			event_target:charB = {
				character_event = {
					id = duelaction.4
				}
			}
		}
	}
}

# CLEARING WHOLE DUEL DATA
character_event = {
	id = duelengine.6
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_alive = yes
	}

	immediate = {
		# clear action list
		character_event = {
			id = duelaction.1
		}
		# clear all duel stats
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			value = 0
		}
		set_variable = {
			which = "duel_att"
			value = 0
		}
		set_variable = {
			which = "duel_def"
			value = 0
		}
		set_variable = {
			which = "duel_dmg"
			value = 0
		}
		set_variable = {
			which = "duel_hp"
			value = 0
		}
		set_variable = {
			which = "duel_max_hp"
			value = 0
		}
		# clear effects
		clr_character_flag = debug_effect_awarness
		clr_character_flag = duel_effect_noescape
		clr_character_flag = duel
		clr_character_flag = duel_no_death
		clr_character_flag = noescape_duel		
		# events
		clr_character_flag = duel_wh_chaos_khorne.120
		clr_character_flag = duel_wh_chaos_demons.4
		clr_character_flag = duel_wh_chaos_demons.4_hunter		
		clr_character_flag = duel_wh_chaos.43
		clr_character_flag = duel_wh_chaos.43_hunter
	}
}
