

# @author Arsakes <elminister@interia.pl>
# @compatibility 2.3.0

# @modified_on 0.4
# @description Warhammer mod duel action

# @wip
# Here are duel actions defined that is

# effects of actions that player can perform during duel
namespace = duelaction

# duelaction.0 - prepare list of actions
# duelaction.1 - clear list of actions

# duelaction.2 - pick action
# duelaction.3 - resolves action (triggered from duelengine)

# external:duelengine.4 - trigger after picking action
# external:duelengine.5 - trigger after resolving action

# Ranges:
# Mechanics: 0-9

# Action definitions: 10-99
# Report events: 100-199

# Duel outcomes: 200-x
# The rest are action definitions!

# INIT EVENT SET THE AMOUNT OF ACTIONS
# duelaction.0 This event is first and most important it checks

# if action is available to characer and give this action an
# unique id so it can be displayed as an option in duel event
character_event = {
	id = duelaction.0
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.0"
		set_variable = {
			which = "action_nr"
			value = 0
		}
		set_variable = {
			which = "action_picked"
			value = 1
		}
		# BASIC ACTIONS
		change_variable = {
			which = "action_nr"
			value = 1
		}
		change_variable = {
			which = "d_action_meele_strike"
			which = "action_nr"
		}
		if = {
			limit = {
				check_variable = {
					which = z_dodge
					value = 1
				}
				check_variable = {
					which = "dodge_timer"
					value = 0
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_dodge"
				which = "action_nr"
			}
		}
		if = {
			limit = {
				check_variable = {
					which = z_parry
					value = 1
				}
				check_variable = {
					which = "block_timer"
					value = 0
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_parry"
				which = "action_nr"
			}
		}
		if = {
			limit = {
				check_variable = {
					which = z_assess
					value = 1
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_assess" which = "action_nr"
			}
		}
		# NON COLOUR LORES
		if = {
			limit = {
				trait = lore_high_magic
				check_variable = {
					which = "spell_power"
					value = 1
				}
				check_variable = {
					which = "spellknownlvl"
					value = 1
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_high_magic_healing"
				which = "action_nr"
			}
		}
		if = {
			limit = {
				trait = lore_high_magic
				check_variable = {
					which = "spell_power"
					value = 2
				}
				check_variable = {
					which = "spellknownlvl"
					value = 2
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_high_magic_shielding"
				which = "action_nr"
			}
		}
		if = {
			limit = {
				trait = lore_high_magic
				check_variable = {
					which = "spell_power"
					value = 1
				}
				check_variable = {
					which = "spellknownlvl"
					value = 3
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_high_magic_fire"
				which = "action_nr"
			}
		}
		if = {
			limit = {
				trait = lore_high_magic
				check_variable = {
					which = "spell_power"
					value = 3
				}
				check_variable = {
					which = "spellknownlvl"
					value = 4
				}
			}
			change_variable = {
				which = "action_nr"
				value = 1
			}
			change_variable = {
				which = "d_action_high_magic_curse"
				which = "action_nr"
			}
		}
	}
}

# Here is clear event plz add clearing if you added any actions
character_event = {
	id = duelaction.1
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.1"
		# here you should clear all action flags
		clr_character_flag = duel_action_meele
		clr_character_flag = duel_action_dodge
		clr_character_flag = duel_action_block
		clr_character_flag = duel_action_assess
		clr_character_flag = high_magic_duel_healing
		clr_character_flag = high_magic_duel_shielding
		clr_character_flag = high_magic_duel_fire
		clr_character_flag = high_magic_duel_curse
		set_variable = {
			which = "action_nr"
			value = 0
		}
		set_variable = {
			which = "action_picked"
			value = 0
		}
		# BASIC ACTIONS
		set_variable = {
			which = "d_action_meele_strike"
			value = 0
		}
		set_variable = {
			which = "d_action_dodge"
			value = 0
		}
		set_variable = {
			which = "d_action_parry"
			value = 0
		}
		set_variable = {
			which = "d_action_assess"
			value = 0
		}
		set_variable = {
			which = "d_action_channel"
			value = 0
		}
		set_variable = {
			which = "d_action_ice"
			value = 0
		}
		set_variable = {
			which = "d_action_fire"
			value = 0
		}
		set_variable = {
			which = "d_action_beasts"
			value = 0
		}
		set_variable = {
			which = "d_action_metal"
			value = 0
		}
		set_variable = {
			which = "d_action_light"
			value = 0
		}
		set_variable = {
			which = "d_action_life"
			value = 0
		}
		set_variable = {
			which = "d_action_heavens"
			value = 0
		}
		set_variable = {
			which = "d_action_death"
			value = 0
		}
		set_variable = {
			which = "d_action_shadows"
			value = 0
		}
		set_variable = {
			which = "d_action_dark_magic"
			value = 0
		}
		set_variable = {
			which = "d_action_nurgle"
			value = 0
		}
		set_variable = {
			which = "d_action_slaanesh"
			value = 0
		}
		set_variable = {
			which = "d_action_tzeentch"
			value = 0
		}
		set_variable = {
			which = "d_action_necromancy"
			value = 0
		}
		set_variable = {
			which = "d_action_waaagh"
			value = 0
		}
		set_variable = {
			which = "d_action_high_magic_healing"
			value = 0
		}
		set_variable = {
			which = "d_action_high_magic_shielding"
			value = 0
		}
		set_variable = {
			which = "d_action_high_magic_mage_fire"
			value = 0
		}
		set_variable = {
			which = "d_action_high_magic_curse"
			value = 0
		}
	}
	# SO now each lore accessible to character has own number
}

character_event = {
	id = duelaction.2
	desc = "EVTDESC_DUELACTION_2"
	picture = "GFX_evt_generic_duel"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	trigger = {
		is_alive = yes
	}

	# before this event one must execute duelaction.1 to set the list of available actions
	# next action
	immediate = {
		log = "work event id = duelaction.2"
	}

	option = {
		name = "NEXT_ACTION"
		if = {
			limit = {
				is_variable_equal = {
					which = "action_picked"
					which = "action_nr"
				}
			}
			# circular menu
			set_variable = {
				which = "action_picked"
				value = 1
			}
			hidden_tooltip = {
				repeat_event = {
					id = duelaction.2
				}
			}
			break = yes
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = "action_picked"
						which = "action_nr"
					}
				}
			}
			change_variable = {
				which = "action_picked"
				value = 1
			}
			hidden_tooltip = {
				repeat_event = {
					id = duelaction.2
				}
			}
			break = yes
		}
		ai_chance = {
			factor = 1
		}
	}

	# previous action
	option = {
		name = "PREVIOUS_ACTION"
		if = {
			limit = {
				is_variable_equal = {
					which = "action_picked"
					value = 1
				}
			}
			# circular menu
			set_variable = {
				which = "action_picked"
				which = "action_nr"
			}
			hidden_tooltip = {
				repeat_event = {
					id = duelaction.2
				}
			}
			break = yes
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = "action_picked"
						value = 1
					}
				}
			}
			change_variable = {
				which = "action_picked"
				value = -1
			}
			hidden_tooltip = {
				repeat_event = {
					id = duelaction.2
				}
			}
			break = yes
		}
		ai_chance = {
			factor = 0
		}
	}

	# OK NOW JUST ALL ACTIONS ( YES GONNA BE HUGE)
	option = {
		name = "ACTION_MEELE_STRIKE"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_meele_strike"
			}
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.10
			}
		}
		ai_chance = {
			factor = 90
		}
	}

	option = {
		name = "ACTION_DODGE"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_dodge"
			}
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.11
			}
		}
		set_variable = {
			which = "dodge_timer"
			value = "5"
		}
		change_variable = {
			which = z_dodge
			value = -1
		}
		ai_chance = {
			factor = 1
		}
	}

	option = {
		name = "ACTION_PARRY"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_parry"
			}
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.12
			}
		}
		ai_chance = {
			factor = 1
		}
		set_variable = {
			which = "block_timer"
			value = "5"
		}
		change_variable = {
			which = z_parry
			value = -1
		}
	}

	option = {
		name = "ACTION_ASSESS"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_assess"
			}
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.13
			}
		}
		change_variable = {
			which = z_assess
			value = -1
		}
		ai_chance = {
			factor = 1
		}
	}

	option = {
		name = "ACTION_LORE_HIGH_MAGIC_HEALING"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_high_magic_healing"
			}
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.21
			}
		}
		change_variable = {
			which = "spell_power"
			value = -1
		}
		set_variable = {
			which = "high_magic_healing"
			value = 6
		}
		ai_chance = {
			factor = 0
		}
	}

	option = {
		name = "ACTION_LORE_HIGH_MAGIC_SHIELDING"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_high_magic_shielding"
			}
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.21
			}
		}
		change_variable = {
			which = "spell_power"
			value = -2
		}
		set_variable = {
			which = "high_magic_shielding"
			value = 12
		}
		ai_chance = {
			factor = 0
		}
	}

	option = {
		name = "ACTION_LORE_HIGH_MAGIC_CURSE"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_high_magic_curse"
			}
		}
		set_variable = {
			which = "high_magic_curse"
			value = 12
		}
		change_variable = {
			which = "spell_power"
			value = -2
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.21
			}
		}
		ai_chance = {
			factor = 0
		}
	}

	option = {
		name = "ACTION_LORE_HIGH_MAGIC_FIRE"
		trigger = {
			is_variable_equal = {
				which = "action_picked"
				which = "d_action_high_magic_fire"
			}
		}
		set_variable = {
			which = "high_magic_fire"
			value = 2
		}
		change_variable = {
			which = "spell_power"
			value = -1
		}
		hidden_tooltip = {
			character_event = {
				id = duelaction.21
			}
		}
		ai_chance = {
			factor = 0
		}
	}
}

# ACTION EFFECTS CALCULAITON
# This events takes into consideration the action declared by both characters

# and calculates final duel_att_mod and duel_def_mod values for the round
# triggered from outside by duelengine.4

# repeats itself for both characters
character_event = {
	id = duelaction.3
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "work event id = duelaction.3"
		# HANDLING PRESENT EFFECTS
		# awarness
		if = {
			limit = {
				check_variable = {
					which = "duel_effect_awarness"
					value = 1
				}
			}
			change_variable = {
				which = "duel_att_mod"
				value = 1
			}
			change_variable = {
				which = "duel_def_mod"
				value = 1
			}
			change_variable = {
				which = "duel_effect_awarness"
				value = -1
			}
		}
		# RESOLVING ACTIONS (almost nothing to do atm)
		if = {
			limit = {
				has_character_flag = duel_action_assess
			}
			set_variable = {
				which = "duel_effect_awarness"
				value = 2
			}
		}
		# RESOLVING COOLDOWNS
		# change_variable = { which = "duel_cooldown_block"				value = -1 }
		# change_variable = { which = "duel_cooldown_dodge"			value = -1 }
		clear_event_target = attacker
		clear_event_target = defender
		# DON'T TOUCH AFTER THIS POINT
		if = {
			limit = {
				character = event_target:charA
			}
			# log = "Resolved actions for charA (duelaction.3)"
			event_target:charA = {
				save_event_target_as = defender
			}
			event_target:charB = {
				save_event_target_as = attacker
			}
			# loop this event
			event_target:charB = {
				character_event = {
					id = duelaction.3
				}
			}
		}
		if = {
			limit = {
				NOT = {
					character = event_target:charA
				}
			}
			# if calculations are done now is the time for reports
			# log = "Resolved actions for charB (duelaction.3)"
			event_target:charA = {
				save_event_target_as = attacker
			}
			event_target:charB = {
				save_event_target_as = defender
			}
			event_target:charA = {
				character_event = {
					id = duelengine.5
				}
			}
		}
	}
}

# duelaction.4
# here we decide which report will be triggered basing on character actions
# and round outcome
# ROOT = event_target:charB (always)
# remember ALWAYS SEND THE REPORT TO CHAR A (there are reasons for that)
# also since we use "break" instruction the order of IF statements DOES MATTER
character_event = {
	id = duelaction.4
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "work event id = duelaction.4"
		# FIXME
		# if = {
			# limit = {
				# character = event_target:charA
			# }
			# log = "this is A"
		# }
		# if = {
			# limit = {
				# character = event_target:charB
			# }
			# log = "this is B"
		# }
		# log = "Round finished reports are to be send"
		# FIXME
		# DUEL OUTCOME REPORTS
		if = {
			limit = {
				event_target:charB = {
					NOT = {
						check_variable = {
							which = "duel_hp"
							value = 1
						}
					}
				}
			}
			random_list = {
				80 = {
					# B have been slain
					event_target:charA = {
						character_event = {
							id = duelaction.201
						}
					}
				}
				20 = {
					# dont take prisoners
					modifier = {
						factor = 0
						or = {
							event_target:charB = {
								or = {
									religion_group = greenskin_gods_group
									is_demon_trigger = yes
									is_invincible_trigger = yes
									has_character_modifier = z_foresight_blessing_battle
									has_character_flag = duel_no_death
								}
							}
							event_target:charA = {
								religion_group = greenskin_gods_group
							}
						}
					}
					# rats can take rats
					modifier = {
						factor = 0
						nand = {
							event_target:charB = {
								religion_group = horned_rat_god_group
							}
							event_target:charA = {
								religion_group = horned_rat_god_group
							}
						}
					}
					# non battle duels
					modifier = {
						factor = 0
						or = {
							event_target:charB = {
								has_character_flag = duel_non_battle
							}
							event_target:charA = {
								has_character_flag = duel_non_battle
							}
						}
					}
					# human likes humans
					modifier = {
						factor = 2
						event_target:charA = {
							is_living_human_trigger = yes
						}
						event_target:charB = {
							is_living_human_trigger = yes
						}
					}
					# B have been imprisoned
					event_target:charA = {
						character_event = {
							id = duelaction.205
						}
					}
				}
			}
			break = yes
		}
		if = {
			limit = {
				event_target:charA = {
					NOT = {
						check_variable = {
							which = "duel_hp"
							value = 1
						}
					}
				}
			}
			random_list = {
				80 = {
					# A have been slain
					event_target:charB = {
						character_event = {
							id = duelaction.201
						}
					}
				}
				20 = {
					# dont take prisoners
					modifier = {
						factor = 0
						or = {
							event_target:charA = {
								or = {
									religion_group = greenskin_gods_group
									is_demon_trigger = yes
									is_invincible_trigger = yes
									has_character_modifier = z_foresight_blessing_battle
									has_character_flag = duel_no_death
								}
							}
							event_target:charB = {
								religion_group = greenskin_gods_group
							}
						}
					}
					# rats can take rats
					modifier = {
						factor = 0
						nand = {
							event_target:charB = {
								religion_group = horned_rat_god_group
							}
							event_target:charA = {
								religion_group = horned_rat_god_group
							}
						}
					}
					# non battle duels
					modifier = {
						factor = 0
						or = {
							event_target:charB = {
								has_character_flag = duel_non_battle
							}
							event_target:charA = {
								has_character_flag = duel_non_battle
							}
						}
					}
					# human likes humans
					modifier = {
						factor = 2
						event_target:charA = {
							is_living_human_trigger = yes
						}
						event_target:charB = {
							is_living_human_trigger = yes
						}
					}
					# A have been imprisoned
					event_target:charB = {
						character_event = {
							id = duelaction.205
						}
					}
				}
			}
			break = yes
		}
		# SPECIFIC REPORT 1
		if = {
			limit = {
				has_character_flag = duel_action_meele
				event_target:charB = {
					has_character_flag = duel_action_meele
				}
			}
			event_target:charA = {
				character_event = {
					id = duelaction.102
				}
			}
			break = yes
			# trigger symetric fight report pair
		}
		# SPECIFIC REPORT 2 ...
		# GENERIC REPORT
		event_target:charA = {
			character_event = {
				id = duelaction.100
			}
		}
	}
}

# ACTION DEFINITIONS
# Here are action effects defined. Each event sets the variables: duel_att_mod duel_def_mod and a flag with its name: duel_action_<nameofaction>
# To add action for player to pick during duel you have to modify duelaction.0,1,2 too
# To define interaction between action you have to modify duelaction.3
# BASIC ACTIONS (section basic in decisions)

# action 1: Meele Strike k6 duel_att
character_event = {
	id = duelaction.10
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.10"
		set_character_flag = duel_action_meele
		set_variable = {
			which = "duel_att_mod"
			which = "duel_att"
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		# throw d6
		random_list = {
			3 = {
				change_variable = {
					which = "duel_att_mod"
					value = 1
				}
			}
			2 = {
				change_variable = {
					which = "duel_att_mod"
					value = 2
				}
			}
			1 = {
				change_variable = {
					which = "duel_att_mod"
					value = 3
				}
			}
		}
		character_event = {
			id = duelengine.4
		}
	}
}

# action 2: dodge - increases defence
character_event = {
	id = duelaction.11
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.11"
		set_character_flag = duel_action_dodge
		set_variable = {
			which = "duel_att_mod"
			which = "duel_att"
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		random_list = {
			2 = {
				change_variable = {
					which = "duel_def_mod"
					value = 0
				}
			}
			1 = {
				change_variable = {
					which = "duel_def_mod"
					value = 5
				}
			}
			1 = {
				change_variable = {
					which = "duel_def_mod"
					value = 10
				}
			}
		}
		character_event = {
			id = duelengine.4
		}
	}
}

# action 3: block/parry (only against meele)
character_event = {
	id = duelaction.12
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.12"
		set_character_flag = duel_action_block
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		change_variable = {
			which = "duel_def_mod"
			which = "duel_att"
		}
		character_event = {
			id = duelengine.4
		}
	}
}

# action 4: assess situation
character_event = {
	id = duelaction.13
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.13"
		set_character_flag = duel_action_assess
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		character_event = {
			id = duelengine.4
		}
	}
}

character_event = {
	id = duelaction.21
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.21"
		set_character_flag = high_magic_duel_healing
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		character_event = {
			id = duelengine.4
		}
	}
}

character_event = {
	id = duelaction.22
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.22"
		set_character_flag = high_magic_duel_shielding
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		character_event = {
			id = duelengine.4
		}
	}
}

character_event = {
	id = duelaction.23
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.23"
		set_character_flag = high_magic_duel_fire
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		character_event = {
			id = duelengine.4
		}
	}
}

character_event = {
	id = duelaction.24
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		log = "work event id = duelaction.24"
		set_character_flag = high_magic_duel_curse
		set_variable = {
			which = "duel_att_mod"
			value = 0
		}
		set_variable = {
			which = "duel_def_mod"
			which = "duel_def"
		}
		character_event = {
			id = duelengine.4
		}
	}
}

# REPORT EVENTS
# For each pair of action (enemy and yours) there is a pair of report events.
# In first event from the pair ROOT = event_target:charA
# Second event may send to charA or charB
# in first case the first event is send to B
# _simple right_?
# BOTH ATTACK

# 1st char
character_event = {
	id = duelaction.100
	desc = "EVTDESC_DUELACTION_100"
	picture = "GFX_evt_duel2"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes
	# charB got this event

	# next round
	immediate = {
		log = "work event id = duelaction.100"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		log = "Reports were shown to both."
		event_target:charA = {
			character_event = {
				id = duelengine.3
			}
		}
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		event_target:charB = {
			character_event = {
				id = duelaction.101
			}
		}
	}
}

# 2nd char
character_event = {
	id = duelaction.101
	desc = "EVTDESC_DUELACTION_101"
	picture = "GFX_evt_duel2"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes
	# charB got this event

	# next round
	immediate = {
		log = "work event id = duelaction.101"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		log = "Reports were shown to both."
		# charA got this event
		event_target:charA = {
			character_event = {
				id = duelengine.3
			}
		}
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		# symmetric response
		event_target:charB = {
			character_event = {
				id = duelaction.100
			}
		}
	}
}

# OTHER OPTION
# 1st char
character_event = {
	id = duelaction.102
	desc = "EVTDESC_DUELACTION_102"
	picture = "GFX_evt_duel2"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes
	# charB got this event

	# charA got this event
	immediate = {
		log = "work event id = duelaction.102"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		log = "Reports were shown to both."
		# next round
		event_target:charA = {
			character_event = {
				id = duelengine.3
			}
		}
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		event_target:charB = {
			character_event = {
				id = duelaction.103
			}
		}
	}
}

# 2nd char
character_event = {
	id = duelaction.103
	desc = "EVTDESC_DUELACTION_103"
	picture = "GFX_evt_duel2"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes
	# charB got this event

	# charA got this event
	immediate = {
		log = "work event id = duelaction.103"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		log = "Reports were shown to both."
		# next round
		event_target:charA = {
			character_event = {
				id = duelengine.3
			}
		}
	}

	# symmetric response
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		event_target:charB = {
			character_event = {
				id = duelaction.102
			}
		}
	}
}

# OUTCOME EVENTS
# Range 200- x
# Those are special kind of report events
# Triggered when somebody dies or something.
# You can set them in duelaction.4 event exactly the same way u set triggering of report events.
# in last the option that is last exectued please trigger duelengine.6 event to clear all duel variables and flags
# OUTCOME: DEATH OF ONE PERSON

# 1st event (for loser)
character_event = {
	id = duelaction.200
	desc = "EVTDESC_DUELACTION_200"
	picture = "GFX_evt_duel4"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	# charB got this event
	immediate = {
		log = "work event id = duelaction.200"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		#log = "Outcome report was shown to both. 200"
		if = {
			limit = {
				or = {
					is_invincible_trigger = yes
					has_character_modifier = z_foresight_blessing_battle
					has_character_flag = duel_no_death
				}
			}
			antideath_effect = yes
			if = {
				limit = {
					has_character_modifier = z_foresight_blessing_battle
				}
				remove_character_modifier = z_foresight_blessing_battle
			}
			wh_duel_clean_effect = yes
			break = yes
		}
		random_list = {
			35 = {
				add_trait = wounded
				modifier = {
					factor = 0
					not = {
						has_character_flag = duel_non_battle
					}
				}
			}
			35 = {
				add_trait = maimed
				modifier = {
					factor = 0
					not = {
						has_character_flag = duel_non_battle
					}
				}
			}
			10 = {
				death = {
					death_reason = death_duel
					killer = event_target:charA
				}
			}
		}
		wh_duel_clean_effect = yes
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
	 	if = {
			limit = {
				or = {
					is_invincible_trigger = yes
					has_character_modifier = z_foresight_blessing_battle
					has_character_flag = duel_no_death
				}
			}
			antideath_effect = yes
			if = {
				limit = {
					has_character_modifier = z_foresight_blessing_battle
				}
				remove_character_modifier = z_foresight_blessing_battle
			}
			wh_duel_clean_effect = yes
			break = yes
		}
		random_list = {
			35 = {
				add_trait = wounded
				modifier = {
					factor = 0
					not = {
						has_character_flag = duel_non_battle
					}
				}
			}
			35 = {
				add_trait = maimed
				modifier = {
					factor = 0
					not = {
						has_character_flag = duel_non_battle
					}
				}
			}
			10 = {
				death = {
					death_reason = death_duel
					killer = event_target:charA
				}
			}
		}
		wh_duel_clean_effect = yes
	}
}

# 2nd char (for winner)
character_event = {
	id = duelaction.201
	desc = "EVTDESC_DUELACTION_201"
	picture = "GFX_evt_duel4"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	# charB got this event
	immediate = {
		log = "work event id = duelaction.201"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		#log = "Outcome report was shown to both. 201"
		if = {
			limit = {
				has_character_flag = greenksin_bash_head_duel
			}
			remove_character_modifier = weak_warboss
			clr_character_flag = greenksin_bash_head_duel
			set_character_flag = weak_warboss_bashed_heads
		}
		# khorne tournament for winner
		if = {
			limit = {
				has_character_flag = duel_wh_chaos_khorne.120
			}
			long_character_event = {
				id = wh_chaos_khorne.122
			}
		}
		# hunt demon for winner
		if = {
			limit = {
				has_character_flag = duel_wh_chaos_demons.4
				has_character_flag = duel_wh_chaos_demons.4_hunter
			}
			character_event = {
				id = wh_chaos_demons.40001
			}
		}
		# witch hunter tries to kill the demon
		if = {
			limit = {
				has_character_flag = duel_wh_chaos.43
			}
			# if witch hunter win
			if = {
				limit = {
					has_character_flag = duel_wh_chaos.43_hunter
				}
				piety = 150
				event_target:wh_demon_master = {
					character_event = {
						id = wh_chaos.47
					}
				}
			}
			# witch hunter died
			if = {
				limit = {
					not = {
						has_character_flag = duel_wh_chaos.43_hunter
					}
				}
				event_target:wh_demon_master = {
					character_event = {
						id = wh_chaos.45
					}
				}
			}
		}
		# Slayer level progression
		if = {
			limit = {
				trait = dwarf_slayer
				NOT = {
					has_character_modifier = dwarf_daemon_slayer
				}
			}
			character_event = {
				id = DR_dwarfs.112
			}
		}
			# if Slayer duel, Slayer flees province
		if = {
			limit = {
				has_character_flag = duel_dwarf_slayer
			}
			character_event = {
				id = DR_dwarfs.113
			}
		}
		# send event to looser
		event_target:charA = {
			character_event = {
				id = duelaction.200
			}
		}
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		# symmetric response
		event_target:charB = {
			character_event = {
				id = duelaction.200
			}
		}
		if = {
			limit = {
				has_character_flag = greenksin_bash_head_duel
			}
			remove_character_modifier = weak_warboss
			clr_character_flag = greenksin_bash_head_duel
			set_character_flag = weak_warboss_bashed_heads
		}
		# khorne tournament for winner
		if = {
			limit = {
				has_character_flag = duel_wh_chaos_khorne.120
			}
			long_character_event = {
				id = wh_chaos_khorne.122
			}
		}
		# hunt demon for winner
		if = {
			limit = {
				has_character_flag = duel_wh_chaos_demons.4
				has_character_flag = duel_wh_chaos_demons.4_hunter
			}
			character_event = {
				id = wh_chaos_demons.40001
			}
		}
		# witch hunter tries to kill the demon
		if = {
			limit = {
				has_character_flag = duel_wh_chaos.43
			}
			# if witch hunter win
			if = {
				limit = {
					has_character_flag = duel_wh_chaos.43_hunter
				}
				piety = 150
				event_target:wh_demon_master = {
					character_event = {
						id = wh_chaos.47
					}
				}
			}
			# witch hunter died
			if = {
				limit = {
					not = {
						has_character_flag = duel_wh_chaos.43_hunter
					}
				}
				event_target:wh_demon_master = {
					character_event = {
						id = wh_chaos.45
					}
				}
			}
		}
		if = {
			# Slayer level progression
			limit = {
				trait = dwarf_slayer
				NOT = {
					has_character_modifier = dwarf_daemon_slayer
				}
			}
			character_event = {
				id = DR_dwarfs.112
			}
		}
		if = {
			# if Slayer duel, Slayer flees province
			limit = {
				has_character_flag = duel_dwarf_slayer
			}
			character_event = {
				id = DR_dwarfs.113
			}
		}
		# send event to looser
		event_target:charB = {
			character_event = {
				id = duelaction.200
			}
		}
	}
}

# OUTCOME : Runned away
# The person who runned away
character_event = {
	id = duelaction.202
	desc = "EVTDESC_DUELACTION_202"
	picture = "GFX_evt_battle"
	border = "GFX_event_normal_frame_war"
	is_triggered_only = yes

	# charB got this event
	immediate = {
		log = "work event id = duelaction.202"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		# log = "Outcome report was shown to both. 202"
		wh_duel_clean_effect = yes
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		event_target:charB = {
			character_event = {
				id = duelaction.203
			}
		}
		wh_duel_clean_effect = yes
	}
}

# for the winner
character_event = {
	id = duelaction.203
	desc = "EVTDESC_DUELACTION_203"
	picture = "GFX_evt_battle"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	# charB got this event
	immediate = {
		log = "work event id = duelaction.203"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		# log = "Outcome report was shown to both. 203"
		# symmetric response
		event_target:charB = {
			character_event = {
				id = duelaction.202
			}
		}
		if = {
			limit = {
				has_character_flag = greenksin_bash_head_duel
			}
			remove_character_modifier = weak_warboss
			clr_character_flag = greenksin_bash_head_duel
			set_character_flag = weak_warboss_bashed_heads
		}
		if = {
			# Slayer level progression
			limit = {
				trait = dwarf_slayer
				NOT = {
					has_character_modifier = dwarf_daemon_slayer
				}
			}
			character_event = {
				id = DR_dwarfs.112
			}
		}
		if = {
			# if Slayer duel, Slayer flees province
			limit = {
				has_character_flag = duel_dwarf_slayer
			}
			character_event = {
				id = DR_dwarfs.113
			}
		}
		wh_duel_clean_effect = yes
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		if = {
			limit = {
				has_character_flag = greenksin_bash_head_duel
			}
			remove_character_modifier = weak_warboss
			clr_character_flag = greenksin_bash_head_duel
			set_character_flag = weak_warboss_bashed_heads
		}
		if = {
			# Slayer level progression
			limit = {
				trait = dwarf_slayer
				NOT = {
					has_character_modifier = dwarf_daemon_slayer
				}
			}
			character_event = {
				id = DR_dwarfs.112
			}
		}
		if = {
			# if Slayer duel, Slayer flees province
			limit = {
				has_character_flag = duel_dwarf_slayer
			}
			character_event = {
				id = DR_dwarfs.113
			}
		}
		wh_duel_clean_effect = yes
	}
}

# OUTCOME : imprisoned
# 1st event (for loser)
character_event = {
	id = duelaction.204
	desc = "EVTDESC_DUELACTION_204"
	picture = "GFX_evt_duel4"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	immediate = {
		log = "work event id = duelaction.204"
	}

	# charB got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		# log = "Outcome report was shown to both."
		event_target:charA = {
			imprison = root
		}
		wh_duel_clean_effect = yes
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		event_target:charB = {
			imprison = root
		}
		wh_duel_clean_effect = yes
	}
}

# 2nd char (for winner)
character_event = {
	id = duelaction.205
	desc = "EVTDESC_DUELACTION_205"
	picture = "GFX_evt_duel4"
	border = GFX_event_normal_frame_war
	is_triggered_only = yes

	# charB got this event
	immediate = {
		log = "work event id = duelaction.205"
	}

	option = {
		name = OK
		trigger = {
			character = event_target:charB
		}
		log = "Outcome report was shown to both."
		# symmetric response
		event_target:charA = {
			character_event = {
				id = duelaction.204
			}
		}
	}

	# charA got this event
	option = {
		name = OK
		trigger = {
			character = event_target:charA
		}
		# symmetric response
		event_target:charB = {
			character_event = {
				id = duelaction.204
			}
		}
	}
}
